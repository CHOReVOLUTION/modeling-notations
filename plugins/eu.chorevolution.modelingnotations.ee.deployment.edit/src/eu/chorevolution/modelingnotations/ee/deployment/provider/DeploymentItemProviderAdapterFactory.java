/**
 */
package eu.chorevolution.modelingnotations.ee.deployment.provider;

import eu.chorevolution.modelingnotations.ee.deployment.util.DeploymentAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DeploymentItemProviderAdapterFactory extends DeploymentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DeploymentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.ServiceSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSpecItemProvider serviceSpecItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.ServiceSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSpecAdapter() {
		if (serviceSpecItemProvider == null) {
			serviceSpecItemProvider = new ServiceSpecItemProvider(this);
		}

		return serviceSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.ServiceDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceDependencyItemProvider serviceDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.ServiceDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceDependencyAdapter() {
		if (serviceDependencyItemProvider == null) {
			serviceDependencyItemProvider = new ServiceDependencyItemProvider(this);
		}

		return serviceDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.DeployableServiceSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableServiceSpecItemProvider deployableServiceSpecItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.DeployableServiceSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableServiceSpecAdapter() {
		if (deployableServiceSpecItemProvider == null) {
			deployableServiceSpecItemProvider = new DeployableServiceSpecItemProvider(this);
		}

		return deployableServiceSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.LegacyServiceSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegacyServiceSpecItemProvider legacyServiceSpecItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.LegacyServiceSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegacyServiceSpecAdapter() {
		if (legacyServiceSpecItemProvider == null) {
			legacyServiceSpecItemProvider = new LegacyServiceSpecItemProvider(this);
		}

		return legacyServiceSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.LegacyService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegacyServiceItemProvider legacyServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.LegacyService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegacyServiceAdapter() {
		if (legacyServiceItemProvider == null) {
			legacyServiceItemProvider = new LegacyServiceItemProvider(this);
		}

		return legacyServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.LegacyServiceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegacyServiceInstanceItemProvider legacyServiceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.LegacyServiceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegacyServiceInstanceAdapter() {
		if (legacyServiceInstanceItemProvider == null) {
			legacyServiceInstanceItemProvider = new LegacyServiceInstanceItemProvider(this);
		}

		return legacyServiceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.ChoreographySpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoreographySpecItemProvider choreographySpecItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.ChoreographySpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoreographySpecAdapter() {
		if (choreographySpecItemProvider == null) {
			choreographySpecItemProvider = new ChoreographySpecItemProvider(this);
		}

		return choreographySpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.Choreography} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoreographyItemProvider choreographyItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.Choreography}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoreographyAdapter() {
		if (choreographyItemProvider == null) {
			choreographyItemProvider = new ChoreographyItemProvider(this);
		}

		return choreographyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.DeployableService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableServiceItemProvider deployableServiceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.DeployableService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableServiceAdapter() {
		if (deployableServiceItemProvider == null) {
			deployableServiceItemProvider = new DeployableServiceItemProvider(this);
		}

		return deployableServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.ServiceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceInstanceItemProvider serviceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.ServiceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceInstanceAdapter() {
		if (serviceInstanceItemProvider == null) {
			serviceInstanceItemProvider = new ServiceInstanceItemProvider(this);
		}

		return serviceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.CloudNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudNodeItemProvider cloudNodeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.CloudNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudNodeAdapter() {
		if (cloudNodeItemProvider == null) {
			cloudNodeItemProvider = new CloudNodeItemProvider(this);
		}

		return cloudNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.ee.deployment.ResourceImpact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceImpactItemProvider resourceImpactItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.ee.deployment.ResourceImpact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceImpactAdapter() {
		if (resourceImpactItemProvider == null) {
			resourceImpactItemProvider = new ResourceImpactItemProvider(this);
		}

		return resourceImpactItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (serviceSpecItemProvider != null) serviceSpecItemProvider.dispose();
		if (serviceDependencyItemProvider != null) serviceDependencyItemProvider.dispose();
		if (deployableServiceSpecItemProvider != null) deployableServiceSpecItemProvider.dispose();
		if (legacyServiceSpecItemProvider != null) legacyServiceSpecItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (legacyServiceItemProvider != null) legacyServiceItemProvider.dispose();
		if (legacyServiceInstanceItemProvider != null) legacyServiceInstanceItemProvider.dispose();
		if (choreographySpecItemProvider != null) choreographySpecItemProvider.dispose();
		if (choreographyItemProvider != null) choreographyItemProvider.dispose();
		if (deployableServiceItemProvider != null) deployableServiceItemProvider.dispose();
		if (serviceInstanceItemProvider != null) serviceInstanceItemProvider.dispose();
		if (cloudNodeItemProvider != null) cloudNodeItemProvider.dispose();
		if (resourceImpactItemProvider != null) resourceImpactItemProvider.dispose();
	}

}
