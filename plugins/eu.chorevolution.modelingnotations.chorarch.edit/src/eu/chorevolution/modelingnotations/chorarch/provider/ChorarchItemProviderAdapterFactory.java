/**
 * Copyright 2015 The CHOReVOLUTION project
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.chorevolution.modelingnotations.chorarch.provider;

import eu.chorevolution.modelingnotations.chorarch.util.ChorarchAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ChorarchItemProviderAdapterFactory extends ChorarchAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright 2015 The CHOReVOLUTION project\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ChorarchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ChorArchModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChorArchModelItemProvider chorArchModelItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ChorArchModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChorArchModelAdapter() {
		if (chorArchModelItemProvider == null) {
			chorArchModelItemProvider = new ChorArchModelItemProvider(this);
		}

		return chorArchModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.Adapter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdapterItemProvider adapterItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.Adapter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdapterAdapter() {
		if (adapterItemProvider == null) {
			adapterItemProvider = new AdapterItemProvider(this);
		}

		return adapterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.SecurityFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityFilterItemProvider securityFilterItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.SecurityFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityFilterAdapter() {
		if (securityFilterItemProvider == null) {
			securityFilterItemProvider = new SecurityFilterItemProvider(this);
		}

		return securityFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.BindingComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingComponentItemProvider bindingComponentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.BindingComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingComponentAdapter() {
		if (bindingComponentItemProvider == null) {
			bindingComponentItemProvider = new BindingComponentItemProvider(this);
		}

		return bindingComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ProsumerCoordinationDelegate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProsumerCoordinationDelegateItemProvider prosumerCoordinationDelegateItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ProsumerCoordinationDelegate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProsumerCoordinationDelegateAdapter() {
		if (prosumerCoordinationDelegateItemProvider == null) {
			prosumerCoordinationDelegateItemProvider = new ProsumerCoordinationDelegateItemProvider(this);
		}

		return prosumerCoordinationDelegateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.WebServiceComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebServiceComponentItemProvider webServiceComponentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.WebServiceComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebServiceComponentAdapter() {
		if (webServiceComponentItemProvider == null) {
			webServiceComponentItemProvider = new WebServiceComponentItemProvider(this);
		}

		return webServiceComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.RestServiceComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestServiceComponentItemProvider restServiceComponentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.RestServiceComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestServiceComponentAdapter() {
		if (restServiceComponentItemProvider == null) {
			restServiceComponentItemProvider = new RestServiceComponentItemProvider(this);
		}

		return restServiceComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ThingComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingComponentItemProvider thingComponentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ThingComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingComponentAdapter() {
		if (thingComponentItemProvider == null) {
			thingComponentItemProvider = new ThingComponentItemProvider(this);
		}

		return thingComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ConsumerCoordinationDelegate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsumerCoordinationDelegateItemProvider consumerCoordinationDelegateItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ConsumerCoordinationDelegate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsumerCoordinationDelegateAdapter() {
		if (consumerCoordinationDelegateItemProvider == null) {
			consumerCoordinationDelegateItemProvider = new ConsumerCoordinationDelegateItemProvider(this);
		}

		return consumerCoordinationDelegateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ConsumerInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsumerInterfaceItemProvider consumerInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ConsumerInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsumerInterfaceAdapter() {
		if (consumerInterfaceItemProvider == null) {
			consumerInterfaceItemProvider = new ConsumerInterfaceItemProvider(this);
		}

		return consumerInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ProviderInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProviderInterfaceItemProvider providerInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ProviderInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProviderInterfaceAdapter() {
		if (providerInterfaceItemProvider == null) {
			providerInterfaceItemProvider = new ProviderInterfaceItemProvider(this);
		}

		return providerInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.chorevolution.modelingnotations.chorarch.ClientAppComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientAppComponentItemProvider clientAppComponentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.chorevolution.modelingnotations.chorarch.ClientAppComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientAppComponentAdapter() {
		if (clientAppComponentItemProvider == null) {
			clientAppComponentItemProvider = new ClientAppComponentItemProvider(this);
		}

		return clientAppComponentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (chorArchModelItemProvider != null) chorArchModelItemProvider.dispose();
		if (adapterItemProvider != null) adapterItemProvider.dispose();
		if (securityFilterItemProvider != null) securityFilterItemProvider.dispose();
		if (bindingComponentItemProvider != null) bindingComponentItemProvider.dispose();
		if (prosumerCoordinationDelegateItemProvider != null) prosumerCoordinationDelegateItemProvider.dispose();
		if (webServiceComponentItemProvider != null) webServiceComponentItemProvider.dispose();
		if (restServiceComponentItemProvider != null) restServiceComponentItemProvider.dispose();
		if (thingComponentItemProvider != null) thingComponentItemProvider.dispose();
		if (consumerCoordinationDelegateItemProvider != null) consumerCoordinationDelegateItemProvider.dispose();
		if (consumerInterfaceItemProvider != null) consumerInterfaceItemProvider.dispose();
		if (providerInterfaceItemProvider != null) providerInterfaceItemProvider.dispose();
		if (clientAppComponentItemProvider != null) clientAppComponentItemProvider.dispose();
	}

}
